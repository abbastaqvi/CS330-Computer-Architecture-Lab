$date
	Wed Apr 13 10:36:52 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module RISC_V_Pr_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module RISCV $end
$var wire 64 # WriteData [63:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 5 $ rs2 [4:0] $end
$var wire 5 % rs1 [4:0] $end
$var wire 5 & rd [4:0] $end
$var wire 32 ' instruction [31:0] $end
$var wire 64 ( imm_data [63:0] $end
$var wire 7 ) funct7 [6:0] $end
$var wire 3 * funct3 [2:0] $end
$var wire 1 + Zero $end
$var wire 1 , RegWrite $end
$var wire 64 - ReadDataMem [63:0] $end
$var wire 64 . ReadData2 [63:0] $end
$var wire 64 / ReadData1 [63:0] $end
$var wire 64 0 PC_Out [63:0] $end
$var wire 4 1 Operation [3:0] $end
$var wire 7 2 Opcode [6:0] $end
$var wire 64 3 MuxMemOut [63:0] $end
$var wire 64 4 MuxBranchOut [63:0] $end
$var wire 64 5 MuxALUOut [63:0] $end
$var wire 1 6 MemtoReg $end
$var wire 1 7 MemWrite $end
$var wire 1 8 MemRead $end
$var wire 1 9 Branch $end
$var wire 64 : Adder2Out [63:0] $end
$var wire 64 ; Adder1Out [63:0] $end
$var wire 64 < ALUresult [63:0] $end
$var wire 1 = ALUSrc $end
$var wire 2 > ALUOp [1:0] $end
$scope module ALU64 $end
$var wire 64 ? B [63:0] $end
$var wire 4 @ ALUOp [3:0] $end
$var wire 64 A A [63:0] $end
$var reg 64 B O [63:0] $end
$var reg 1 + Zero $end
$upscope $end
$scope module DMem $end
$var wire 64 C Mem_Addr [63:0] $end
$var wire 1 ! clk $end
$var wire 64 D WriteData [63:0] $end
$var wire 1 7 MemWrite $end
$var wire 1 8 MemRead $end
$var reg 64 E Read_Data [63:0] $end
$upscope $end
$scope module Igen $end
$var wire 32 F instruction [31:0] $end
$var wire 64 G immed_value [63:0] $end
$scope module m1 $end
$var wire 64 H A [63:0] $end
$var wire 64 I B [63:0] $end
$var wire 64 J C [63:0] $end
$var wire 2 K S [1:0] $end
$var wire 64 L O [63:0] $end
$upscope $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 64 M PC_In [63:0] $end
$var reg 64 N PC_Out [63:0] $end
$upscope $end
$scope module ac1 $end
$var wire 4 O Funct [3:0] $end
$var wire 2 P ALUOp [1:0] $end
$var reg 4 Q Operation [3:0] $end
$upscope $end
$scope module add1 $end
$var wire 64 R a [63:0] $end
$var wire 64 S b [63:0] $end
$var wire 64 T c [63:0] $end
$upscope $end
$scope module add2 $end
$var wire 64 U a [63:0] $end
$var wire 64 V b [63:0] $end
$var wire 64 W c [63:0] $end
$upscope $end
$scope module c1 $end
$var wire 7 X Opcode [6:0] $end
$var reg 2 Y ALUOp [1:0] $end
$var reg 1 = ALUSrc $end
$var reg 1 9 Branch $end
$var reg 1 8 MemRead $end
$var reg 1 7 MemWrite $end
$var reg 1 6 MemtoReg $end
$var reg 1 , RegWrite $end
$upscope $end
$scope module iMem $end
$var wire 64 Z Inst_address [63:0] $end
$var reg 32 [ Instruction [31:0] $end
$upscope $end
$scope module iParser $end
$var wire 32 \ instruction [31:0] $end
$var wire 5 ] rs2 [24:20] $end
$var wire 5 ^ rs1 [19:15] $end
$var wire 5 _ rd [11:7] $end
$var wire 7 ` opcode [6:0] $end
$var wire 7 a funct7 [31:25] $end
$var wire 3 b funct3 [14:12] $end
$upscope $end
$scope module muxALUSrc $end
$var wire 64 c B [63:0] $end
$var wire 1 = S $end
$var wire 64 d O [63:0] $end
$var wire 64 e A [63:0] $end
$upscope $end
$scope module muxBranch $end
$var wire 64 f A [63:0] $end
$var wire 64 g B [63:0] $end
$var wire 1 h S $end
$var wire 64 i O [63:0] $end
$upscope $end
$scope module muxMemory $end
$var wire 64 j A [63:0] $end
$var wire 64 k B [63:0] $end
$var wire 1 6 S $end
$var wire 64 l O [63:0] $end
$upscope $end
$scope module rFile $end
$var wire 1 , RegWrite $end
$var wire 64 m WriteData [63:0] $end
$var wire 1 ! clk $end
$var wire 5 n rd [4:0] $end
$var wire 1 " reset $end
$var wire 5 o rs1 [4:0] $end
$var wire 5 p rs2 [4:0] $end
$var reg 64 q ReadData1 [63:0] $end
$var reg 64 r ReadData2 [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 r
b0 q
b1000 p
b1010 o
b1001 n
bz m
b1111111111111111111111111111111111111111111111111111111111010111 l
b1111111111111111111111111111111111111111111111111111111111010111 k
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx j
b100 i
0h
b1010000 g
b100 f
b0 e
b101000 d
b101000 c
b11 b
b1 a
b11 `
b1001 _
b1010 ^
b1000 ]
b10100001010011010010000011 \
b10100001010011010010000011 [
b0 Z
b10 Y
b11 X
b1010000 W
b1010000 V
b0 U
b100 T
b0 S
b100 R
bx Q
b10 P
b11 O
b0 N
b100 M
b101000 L
b0 K
b10000010100 J
b101001 I
b101000 H
b101000 G
b10100001010011010010000011 F
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx E
b0 D
b1111111111111111111111111111111111111111111111111111111111010111 C
b1111111111111111111111111111111111111111111111111111111111010111 B
b0 A
bx @
b101000 ?
b10 >
1=
b1111111111111111111111111111111111111111111111111111111111010111 <
b100 ;
b1010000 :
09
18
07
16
b101000 5
b100 4
b1111111111111111111111111111111111111111111111111111111111010111 3
b11 2
bx 1
b0 0
b0 /
b0 .
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -
1,
0+
b11 *
b1 )
b101000 (
b10100001010011010010000011 '
b1001 &
b1010 %
b1000 $
bz #
1"
0!
$end
#5
1!
#10
b1111111111111111111111111111111111111111111111111111111111010101 3
b1111111111111111111111111111111111111111111111111111111111010101 l
b1111111111111111111111111111111111111111111111111111111111010101 <
b1111111111111111111111111111111111111111111111111111111111010101 B
b1111111111111111111111111111111111111111111111111111111111010101 C
b1111111111111111111111111111111111111111111111111111111111010101 k
b1000 .
b1000 D
b1000 e
b1000 r
b1010 /
b1010 A
b1010 q
0!
0"
#15
x+
bx <
bx B
bx C
bx k
bz .
bz D
bz e
bz r
b10101 /
b10101 A
b10101 q
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 3
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx l
bz 5
bz ?
bz d
b10010 V
08
06
0=
b10 1
b10 @
b10 Q
b1001 (
b1001 G
b1001 L
b1001 c
b110011 2
b110011 X
b110011 `
b0 O
b0 *
b0 b
b10101 %
b10101 ^
b10101 o
b1001 $
b1001 ]
b1001 p
b0 )
b0 a
b1 K
b10000000100 J
b1001 I
b1001 H
b1000 4
b1000 M
b1000 i
b100110101000010010110011 '
b100110101000010010110011 F
b100110101000010010110011 [
b100110101000010010110011 \
b1000 ;
b1000 T
b1000 f
b10110 :
b10110 W
b10110 g
b100 0
b100 N
b100 S
b100 U
b100 Z
1!
#20
0!
#25
x+
bx <
bx B
bx C
bx k
b1 .
b1 D
b1 e
b1 r
bz /
bz A
bz q
b1 5
b1 ?
b1 d
b10 V
b0 >
b0 P
b0 Y
1=
b1 (
b1 G
b1 L
b1 c
b10011 2
b10011 X
b10011 `
b1001 %
b1001 ^
b1001 o
b1 $
b1 ]
b1 p
b0 K
b1 H
b1100 4
b1100 M
b1100 i
b101001000010010010011 '
b101001000010010010011 F
b101001000010010010011 [
b101001000010010010011 \
b1100 ;
b1100 T
b1100 f
b1010 :
b1010 W
b1010 g
b1000 0
b1000 N
b1000 S
b1000 U
b1000 Z
1!
#30
0!
#35
0+
b110010 <
b110010 B
b110010 C
b110010 k
bz .
bz D
bz e
bz r
b1010 /
b1010 A
b1010 q
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 3
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx l
b101000 5
b101000 ?
b101000 d
b1010000 V
17
0,
x6
b101000 (
b101000 G
b101000 L
b101000 c
b100011 2
b100011 X
b100011 `
b1000 &
b1000 _
b1000 n
b11 O
b11 *
b11 b
b1010 %
b1010 ^
b1010 o
b1001 $
b1001 ]
b1001 p
b1 )
b1 a
b1 K
b10100 J
b101000 I
b101001 H
b10000 4
b10000 M
b10000 i
b10100101010011010000100011 '
b10100101010011010000100011 F
b10100101010011010000100011 [
b10100101010011010000100011 \
b10000 ;
b10000 T
b10000 f
b1011100 :
b1011100 W
b1011100 g
b1100 0
b1100 N
b1100 S
b1100 U
b1100 Z
1!
#40
0!
#45
b10100 4
b10100 M
b10100 i
b10100 ;
b10100 T
b10100 f
b1100000 :
b1100000 W
b1100000 g
b10000 0
b10000 N
b10000 S
b10000 U
b10000 Z
1!
#50
0!
#55
b11000 4
b11000 M
b11000 i
b11000 ;
b11000 T
b11000 f
b1100100 :
b1100100 W
b1100100 g
b10100 0
b10100 N
b10100 S
b10100 U
b10100 Z
1!
#60
0!
#65
b11100 4
b11100 M
b11100 i
b11100 ;
b11100 T
b11100 f
b1101000 :
b1101000 W
b1101000 g
b11000 0
b11000 N
b11000 S
b11000 U
b11000 Z
1!
#70
0!
#75
b100000 4
b100000 M
b100000 i
b100000 ;
b100000 T
b100000 f
b1101100 :
b1101100 W
b1101100 g
b11100 0
b11100 N
b11100 S
b11100 U
b11100 Z
1!
#80
0!
#85
b100100 4
b100100 M
b100100 i
b100100 ;
b100100 T
b100100 f
b1110000 :
b1110000 W
b1110000 g
b100000 0
b100000 N
b100000 S
b100000 U
b100000 Z
1!
#90
0!
#95
b101000 4
b101000 M
b101000 i
b101000 ;
b101000 T
b101000 f
b1110100 :
b1110100 W
b1110100 g
b100100 0
b100100 N
b100100 S
b100100 U
b100100 Z
1!
#100
0!
